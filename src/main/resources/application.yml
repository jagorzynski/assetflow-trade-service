spring:
  application:
    name: assetflow-trade-service
  data:
    mongodb:
      uri: mongodb://sothrose:sothrose@localhost:27018/trades
      database: trades
server:
  port: 8084

kafka:
  bootstrap-servers: localhost:9092
  topic:
    trade-created: trade-created
  retries: 5
  retries-backoff-in-ms: 1000

market-data-service:
  base-url: "http://localhost:8083"

resilience4j.circuitbreaker:
  instances:
    marketDataService:
      registerHealthIndicator: true
      ringBufferSizeInClosedState: 5
      ringBufferSizeInHalfOpenState: 3
      waitDurationInOpenState: 10s
      failureRateThreshold: 50
      recordExceptions:
        - org.springframework.web.reactive.function.client.WebClientRequestException
        - org.springframework.web.client.HttpServerErrorException
        - java.io.IOException
        - java.util.concurrent.TimeoutException
        - org.springframework.web.client.ResourceAccessException
        - java.net.ConnectException
        - java.lang.RuntimeException

resilience4j.bulkhead:
  instances:
    marketDataService:
      maxWaitDuration: 10ms
      maxConcurrentCalls: 20

resilience4j.thread-pool-bulkhead:
  instances:
    marketDataService:
      maxThreadPoolSize: 1
      coreThreadPoolSize: 1
      queueCapacity: 1
      keepAliveDuration: 20ms

resilience4j.retry:
  instances:
    marketDataService:
      maxRetryAttempts: 5
      waitDuration: 10000
      retry-exceptions:
        - org.springframework.web.reactive.function.client.WebClientRequestException
        - java.util.concurrent.TimeoutException
        - java.net.ConnectException
        - java.lang.RuntimeException

resilience4j.ratelimiter:
  instances:
    marketDataService:
      timeoutDuration: 1000ms
      limitRefreshPeriod: 5000
      limitForPeriod: 5

resilience4j.timelimiter:
  instances:
    marketDataService:
      timeoutDuration: 2s
      cancelRunningFuture: true